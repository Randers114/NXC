struct cube_t
{
 char sides[6][9];
 /* top
	right
	front
	back
	left
	buttom
*/
};

cube_t MyCube;

sub InitializeSide(char a, char b, char c, char d, char e, char f, char g, char h, char i, int sidenumber)
{
	MyCube.sides[sidenumber] = a;
	MyCube.sides[sidenumber] = b;
	MyCube.sides[sidenumber] = c;
	MyCube.sides[sidenumber] = d;
	MyCube.sides[sidenumber] = e;
	MyCube.sides[sidenumber] = f;
	MyCube.sides[sidenumber] = g;
	MyCube.sides[sidenumber] = h;
	MyCube.sides[sidenumber] = i;
}

/* init with hardcoded colors */
sub InitializeCube()
{
	InitializeSide('w','g','w','w','y','y','o','b','r', 0); /* init top */
	InitializeSide('y','o','g','y','o','w','g','w','b', 1);	/* init right */
	InitializeSide('w','r','g','g','g','b','b','b','o', 2);	/* init front */
	InitializeSide('w','o','o','r','b','g','r','y','r', 3);	/* init back */
	InitializeSide('r','g','o','o','r','y','g','r','b', 4);	/* init left */
	InitializeSide('y','w','y','r','w','o','b','b','y', 5);	/* init buttom */
}

sub ClawPull() /* representation changes when the claw pulls the cube front to top etc. */
{
	FaceSwap(2,5);
	FaceSwap(5,3);
	FaceSwap(3,0);

	/* right face operations */
	RotateFaceRight(1);
	/* left face operations */
	RotateFaceRight(4);
}

sub TurnCubeRight() /* turn cube without holding it, aka turning the cube entirly */
{
	/* face swap operations */
	/* swap front to left */
	SwapBetweenFaces(4,9,2,1);
	SwapBetweenFaces(4,8,2,2);
	SwapBetweenFaces(4,7,2,3);
	SwapBetweenFaces(4,6,2,4);
	SwapBetweenFaces(4,5,2,5);
	SwapBetweenFaces(4,4,2,6);
	SwapBetweenFaces(4,3,2,7);
	SwapBetweenFaces(4,2,2,8);
	SwapBetweenFaces(4,1,2,9);

	/*swap left to back */
	FaceSwap(4,3);

	/*swap back to left */
	SwapBetweenFaces(3,7,1,3)
	SwapBetweenFaces(3,8,1,2)
	SwapBetweenFaces(3,9,1,1)
	SwapBetweenFaces(3,4,1,6)
	SwapBetweenFaces(3,5,1,5)
	SwapBetweenFaces(3,6,1,4)
	SwapBetweenFaces(3,1,1,9)
	SwapBetweenFaces(3,2,1,8)
	SwapBetweenFaces(3,3,1,7)


	/* top face operations */
	RotateFaceRight(0);

	/* bot face operations */
	RotateFaceRight(5);
}

sub RotateFaceRight(int FaceIdentifier) /* rotate a face to the right (like when you rotate right side this is what happens to the colours on that side) */
{
	SwapOnFace(FaceIdentifier,2,6);
	SwapOnFace(FaceIdentifier,6,8);
	SwapOnFace(FaceIdentifier,8,4);
	SwapOnFace(FaceIdentifier,1,3);
	SwapOnFace(FaceIdentifier,3,9);
	SwapOnFace(FaceIdentifier,9,7);
}

sub RotateButtomRight() /*holding the top and rotating the buttom face */
{
	/* swap colors on bot */
	RotateFaceRight(5);

	/* rotate the 4 rows that get rotated */
	/* front 7,8,9 to left 3,2,1 */
	SwapBetweenFaces(2,7,1,3);
	SwapBetweenFaces(2,8,1,2);
	SwapBetweenFaces(2,9,1,1);
	/* swap 3,2,1 left with 3,2,1 back */
	SwapBetweenFaces(4,3,3,3);
	SwapBetweenFaces(4,2,3,2);
	SwapBetweenFaces(4,1,3,1);
	/* swap 1,2,3 back with 9,8,7 right */
	SwapBetweenFaces(3,1,1,9);
	SwapBetweenFaces(3,2,1,8);
	SwapBetweenFaces(3,3,1,7);

}

sub FaceSwap(int FaceOneIdentifier, int FaceTwoIdentifier) /* swap the pointer of two faces so they "swap places" */
{
	char[9] temp;
	memcpy(temp, MyCube.sides[FaceTwoIdentifier], 10)
	memcpy(MyCube.sides[FaceTwoIdentifier], MyCube.sides[FaceOneIdentifier], 10)
	memcpy(MyCube.sides[FaceOneIdentifier], temp, 10)
}


sub SwapOnFace(int FaceIdentifier, int SpaceOne, int SpaceTwo) /* swap space one with space two on a given face */
{
	char temp;
	temp = MyCube.sides[FaceIdentifier][SpaceTwo];
	MyCube.sides[FaceIdentifier][SpaceTwo] = MyCube.sides[FaceIdentifier][SpaceOne];
	MyCube.sides[FaceIdentifier][SpaceOne] = temp;
}

sub SwapBetweenFaces(int FaceOne, int SpaceOne, int FaceTwo, int SpaceTwo) /* swap space one on face one with space two on face two */
{
	char temp;
	temp = MyCube.sides[FaceTwo][SpaceTwo];
	MyCube.sides[FaceTwo][SpaceTwo] = MyCube.sides[FaceOne][SpaceOne];
	MyCube.sides[FaceOne][SpaceOne] = temp;
}

/* main program starts here */
task main()
{
 InitializeCube();

 PlaySound(SOUND_FAST_UP);

/*
	if(MyCube.cube[0].side[0] == 'w')
  PlaySound(SOUND_UP);
	else
	PlaySound(SOUND_DOWN);
*/
}
